#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecureBearSSL.h>
#include <time.h>

// Replace with your network credentials
const char* ssid = "Prav";
const char* password = "temp1234";

// MongoDB Atlas Data API details
const char* api_key = "GyI6vNMdJNHVvfXQtJ9oWv8Gas1nPVKrPp0LoPeCSHA5BIfFEBDJMbiI7lwAhlor";
const char* data_api_url = "https://ap-south-1.aws.data.mongodb-api.com/app/data-nlwmghl/endpoint/data/v1/action/insertOne";

// Your MongoDB Atlas cluster and database details
const char* cluster_name = "Flowter-Cluster";
const char* db_name = "FlowterDB";
const char* collection_name = "sensors";

std::unique_ptr<BearSSL::WiFiClientSecure> client(new BearSSL::WiFiClientSecure);

// Sensor-related variables
int X;
int Y;
float TIME = 0;
float FREQUENCY = 0;
float WATER = 0;
float TOTAL = 0;
float SUPPERTOTAL = 0;
float LS = 0;
const int input = D2;  // Adjust this pin as needed
float calibration_factor = 39;

unsigned long previousMillis = 0;
const long interval = 10000; // interval at which to send data (milliseconds)

// Function prototypes
void connectToWiFi();
void waitForNTP();
void sendDataToMongoDB();
String getDate();
String getTime();

void setup() {
  Serial.begin(9600);
  delay(100);
  pinMode(input, INPUT);  // Set input pin mode

  // Connect to Wi-Fi
  connectToWiFi();

  // Configure the client to skip certificate validation for now (you might want to use proper validation in production)
  client->setInsecure();

  // Initialize time (NTP) to get actual date and time
  configTime(19800, 0, "pool.ntp.org", "time.nist.gov"); // UTC+5:30 offset (19800 seconds)

  // Wait for time synchronization
  waitForNTP();

  // Initial data send
  sendDataToMongoDB();
}

void loop() {
  // Read sensor data
  X = pulseIn(input, HIGH);
  Y = pulseIn(input, LOW);
  TIME = X + Y;
  FREQUENCY = 1000000 / TIME;
  WATER = FREQUENCY / calibration_factor;
  LS = WATER / 60;

  // Log sensor readings and calculations
  Serial.print("X: "); Serial.println(X);
  Serial.print("Y: "); Serial.println(Y);
  Serial.print("TIME: "); Serial.println(TIME);
  Serial.print("FREQUENCY: "); Serial.println(FREQUENCY);
  Serial.print("WATER: "); Serial.println(WATER);
  Serial.print("LS: "); Serial.println(LS);

  if (FREQUENCY >= 0) {
    if (!isinf(FREQUENCY)) {
      TOTAL += LS; // Accumulate total volume
      SUPPERTOTAL += LS;
    }
  }

  // Log accumulated total
  Serial.print("TOTAL: "); Serial.println(TOTAL);
  Serial.print("SUPPERTOTAL: "); Serial.println(SUPPERTOTAL);

  // Check if it's time to send data
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    sendDataToMongoDB();
    TOTAL = 0; // Reset total after sending
  }
  delay(1000);
}

void connectToWiFi() {
  WiFi.begin(ssid, password);
  Serial.print("Connecting to Wi-Fi");
  int retryCount = 0;
  while (WiFi.status() != WL_CONNECTED && retryCount < 20) {
    delay(500);
    Serial.print(".");
    retryCount++;
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi connected");
  } else {
    Serial.println("\nFailed to connect to WiFi");
  }
}

void waitForNTP() {
  Serial.print("Waiting for NTP time sync");
  while (time(nullptr) < 8 * 3600 * 2) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nNTP time synchronized");
}

void sendDataToMongoDB() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(*client, data_api_url);  // Use the updated function

    // Set headers
    http.addHeader("Content-Type", "application/json");
    http.addHeader("api-key", api_key);

    // Create JSON payload
    String payload = "{"
                     "\"collection\":\"" + String(collection_name) + "\","
                     "\"database\":\"" + String(db_name) + "\","
                     "\"dataSource\":\"" + String(cluster_name) + "\","
                     "\"document\":{"
                     "\"sid\":\"b1\","
                     "\"value\":" + String(TOTAL) + "," // Send accumulated total volume
                     "\"date\":\"" + getDate() + "\","
                     "\"time\":\"" + getTime() + "\""
                     "}"
                     "}";

    // Log payload
    Serial.print("Payload: "); Serial.println(payload);

    // Send POST request
    int httpResponseCode = http.POST(payload);

    // Print response
    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println(httpResponseCode);
      Serial.println(response);
    } else {
      Serial.print("Error on sending POST: ");
      Serial.println(httpResponseCode);
      Serial.println(http.errorToString(httpResponseCode).c_str()); // Print the error string
    }

    http.end();
  } else {
    Serial.println("WiFi not connected");
  }
}

String getDate() {
  time_t now = time(nullptr);
  struct tm* p_tm = localtime(&now);
  char dateStr[11];
  snprintf(dateStr, sizeof(dateStr), "%04d-%02d-%02d", (p_tm->tm_year + 1900), (p_tm->tm_mon + 1), p_tm->tm_mday);
  return String(dateStr);
}

String getTime() {
  time_t now = time(nullptr);
  struct tm* p_tm = localtime(&now);
  char timeStr[9];
  snprintf(timeStr, sizeof(timeStr), "%02d:%02d:%02d", p_tm->tm_hour, p_tm->tm_min, p_tm->tm_sec);
  return String(timeStr);
}
